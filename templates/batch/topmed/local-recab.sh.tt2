#!/bin/sh

[% IF settings.cluster == 'csg' -%]
#SBATCH --nodes=1
#SBATCH --cpus-per-task=[% job.procs %]
#SBATCH --mem=[% job.memory %]
#SBATCH --gres=tmp:300
#SBATCH --time=[% job.walltime %]
#SBATCH --workdir=[% job.workdir %]
#SBATCH --partition=topmed
#SBATCH --mail-type=FAIL
#SBATCH --mail-user=[% job.email %]
#SBATCH --job-name=[% job.job_name %]
#SBATCH --qos=topmed-local-recab

JOB_ID=$SLURM_JOB_ID
NODELIST=$SLURM_JOB_NODELIST
[% ELSIF settings.cluster == 'flux' -%]
#PBS -l nodes=1:ppn=[% job.procs %]
#PBS -l walltime=[% job.walltime %]
#PBS -l pmem=[% job.memory %]gb
#PBS -m a
#PBS -d [% job.workdir %]
#PBS -M [% job.email %]
#PBS -q flux
#PBS -l qos=flux
#PBS -A [% job.account %]
#PBS -V
#PBS -j oe
#PBS -N [% job.job_name %]

JOB_ID=$PBS_JOBID
NODELIST=$(cat $PBS_NODEFILE)
[% END -%]

set -u -o pipefail

META_ID=[% settings.meta_id %]
MAPPER_CMD=[% settings.mapper_cmd %]
MAPPER_LOG_CMD="$MAPPER_CMD log --meta-id $META_ID"
MAPPER_UPDATE_CMD="$MAPPER_CMD update --meta-id $META_ID"

TMP_DIR=[% settings.tmp_dir %]
INPUT_DIR=[% settings.out_dir %]

DBSNP=/net/fantasia/home/hmkang/code/working/gotcloud_topmed_tmp/resources/Homo_sapiens_assembly38.dbsnp138.vcf.gz # XXX - why is this here?
REFERENCE=[% gotcloud.ref_dir %]/hs38DH.fa

export PERL_CARTON_PATH=[% settings.project_dir %]/local
export PERL5LIB=${PERL_CARTON_PATH}/lib/perl5:[% settings.project_dir %]/lib/perl5:${PERL5LIB}
export PATH=[% settings.project_dir %]/bin:${PERL_CARTON_PATH}/bin:${PATH}

$MAPPER_UPDATE_CMD --start --job-id $JOB_ID --node $NODELIST --step [% settings.step %]

JOB_TMP_BASE=/tmp/[% settings.project %]
[% IF settings.cluster == 'csg' -%]
if [ -d $JOB_TMP_BASE ]; then
  for id in $(ls -1 $JOB_TMP_BASE); do
    if [ $id == 'hg38' ]; then
      continue
    fi

    job_state="$(sacct -j $id -X -n -o state%7)"
    if [ "$job_state" != "RUNNING " ]; then # XXX - left trailing space on purpose
      tmp_dir=${JOB_TMP_BASE}/${id}
      $MAPPER_LOG_CMD --message "removing stale job tmp directory $tmp_dir"
      rm -vrf $tmp_dir
    fi
  done
fi
[% ELSIF settings.cluster == 'flux' -%]
if [ -d $JOB_TMP_BASE ]; then
  for id in $(ls -1 $JOB_TMP_BASE); do
    if [ $id == 'hg38' ]; then
      continue
    fi

    qstat -f -e $id > /dev/null 2>&1
    if [ $? -ne 0 ]; then
      tmp_dir=${JOB_TMP_BASE}/${id}
      $MAPPER_LOG_CMD --message "removing stale job tmp directory $tmp_dir"
      rm -vrf $tmp_dir
    fi
  done
fi
[% END -%]

JOB_TMP_DIR=${JOB_TMP_BASE}/${JOB_ID}
$MAPPER_LOG_CMD --message "creating JOB_TMP_DIR $JOB_TMP_DIR"
mkdir -vp $JOB_TMP_DIR

if [ $? -ne 0 ]; then
  $MAPPER_LOG_CMD --message "failed to create JOB_TMP_DIR $JOB_TMP_DIR" --level critical
  $MAPPER_UPDATE_CMD --state failed
  exit 1
elif [ ! -d $JOB_TMP_DIR ]; then
  $MAPPER_LOG_CMD --message "mkdir returned success but did not create JOB_TMP_DIR $JOB_TMP_DIR" --level critical
  $MAPPER_UPDATE_CMD --state failed
  exit 1
fi

$MAPPER_LOG_CMD --message 'creating output directory [% settings.out_dir %]'
mkdir -p [% settings.out_dir %]
if [ $? -ne 0 ]; then
  $MAPPER_LOG_CMD --message 'failed to create output directory [% settings.out_dir %]' --level critical
  exit 1
fi

rc=0
for CRAM in ${INPUT_DIR}/*.cram; do
  SORTED_FILE=${JOB_TMP_DIR}/$(basename $CRAM .cram).sorted.bam
  $MAPPER_LOG_CMD --message "sorting $CRAM to bam $SORTED_FILE"
  [% gotcloud.samtools %] sort \
    --threads [% job.procs %] \
    --reference $REFERENCE \
    -T $JOB_TMP_DIR \
    -o $SORTED_FILE $CRAM

  if [ $? -ne 0 ]; then
    $MAPPER_LOG_CMD --message "failed to sort $CRAM" --level critical
    rc=1
    break
  fi
done

MERGED_BAM=${JOB_TMP_DIR}/merged.bam
if [ $rc -eq 0 ]; then
  $MAPPER_LOG_CMD --message "merging sorted bams to $MERGED_BAM"
  [% gotcloud.samtools %] merge --threads [% job.procs %] $MERGED_BAM ${JOB_TMP_DIR}/*.sorted.bam

  if [ $? -ne 0 ]; then
    $MAPPER_LOG_CMD --message "merge failed for $MERGED_BAM" --level critical
    rc=1
  else
    RECAB_FILE=[% settings.out_dir %]/[% sample.sample_id %].recab.cram
    $MAPPER_LOG_CMD --message "starting recab to $RECAB_FILE"

    [% gotcloud.dedup %] dedup_LowMem \
      --allReadNames \
      --binCustom \
      --binQualS 0:2,3:3,4:4,5:5,6:6,7:10,13:20,23:30 \
      --log [% settings.out_dir %]/dedup_lowmem.metrics \
      --recab \
      --in $MERGED_BAM \
      --out -.ubam \
      --refFile $REFERENCE \
      --dbsnp $DBSNP \
      | [% gotcloud.samtools %] view -h -C -T $REFERENCE -o $RECAB_FILE --threads [% job.procs %]

    if [ $? -ne 0 ]; then
      $MAPPER_LOG_CMD --message "failed to recab $MERGED_BAM" --level critical
      rc=1
    fi
  fi
fi

$MAPPER_LOG_CMD --message "deleting sorted bams"
#rm -vrf ${JOB_TMP_DIR}/*.sorted.bam
if [ $? -ne 0 ]; then
  $MAPPER_LOG_CMD --message "failed to delete sorted bams" --level critical
  rc=1
fi

$MAPPER_LOG_CMD --message "deleting $MERGED_BAM"
#rm -vrf $MERGED_BAM
if [ $? -ne 0 ]; then
  $MAPPER_LOG_CMD --message "failed to delete merged bam" --level critical
  rc=1
fi

if [ $rc -eq 0 ]; then
  $MAPPER_LOG_CMD --message "deleting chunked aligned cram"
  # TODO - add and | xargs rm
  # TODO - delete *.cram *.cram.ok and *.cram.flagstat but not *.recab.cram
  ls [% settings.out_dir %]/*.cram{,.ok,.flagstat}|grep -v recab
fi

if [ $rc -eq 0 ]; then
  $MAPPER_LOG_CMD --message 'local-recab for [% sample.sample_id %] completed'
  $MAPPER_UPDATE_CMD --state completed --exit-code $rc
else
  $MAPPER_LOG_CMD --message 'local-recab for [% sample.sample_id %] failed' --level critical
  $MAPPER_UPDATE_CMD --state failed --exit-code $rc
fi

exit $rc
